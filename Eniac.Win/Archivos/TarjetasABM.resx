<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAGAAAACgAA
        AAwAAAAQAAAAEAAAAA4AAAAQAAAAEAAAAAwAAAAKAAAABgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAMAAAAEgAA
        ABYAAAAYAAAAGAAAABpFNSIsXEguSiEgGCIUGBMeFRcRHAAAABgAAAAUAAAAEAAAAAwAAAAGAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAKAAAAEgAA
        ABgAAAAcAAAAHGVHK0RnSS12UEs3PJRNIKWANw7xbEsslY5MIaVuSCiPMzQoJmJILDxENyQqAAAAFgAA
        ABQAAAAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAACgAA
        ABQAAAAYAAAAGgAAABogJR4elkwgsYczB/96PBbhm0IV9ahTLP+MNAj9nD4Q/383EPGNTiO7lEAR53RJ
        J6lqUzY4GxcQHAAAABYAAAAMAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAQAAAAQAAAAFAAAABYAAAAWAAAAFG5TNzSbRBbjuG9O/55AFP+xZkT/tm9P/6NIH/+1bk//mDYI/5Uw
        AP+VLgD/jTQI+YtBFuNfSS9UAAAAEgAAABIAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAABAAAAA4AAAAQAAAAEAAAAA4AAAAKkVgwYKFJHfvChmv/n0AS/6lTJv+dOwX/oUMS/508
        Cv+dPg//qFQr/7p1Vf++d1f/hDQM/1tEKmoAAAAMAAAADgAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAKBBIaMgxgV0QYlHRBNKp/O1qmXR+9o0YP/6dNFv+lRQD/q00B/6ZG
        AP+vWiP/1aGI/+S0ov/trZn/8p+G/9+Tef+GORL/XEUsZgAAAAYAAAAIAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACnr6QGsZRmHLKESD60fDRswooon8aHG8nHgBHpw3cJ+7BXA/+nSAD/q00A/7Vc
        AP+yWAD/q00A/8B8Sf/ttaX/8Zd+//OYfv/1oon/4JmB/4Y6FP9iSi9gAAAAAAAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAC0lmYOuoQ2drt6IrW6cxjbuWsN9cFyBv/TiQL/0oYA/8+CAP++aQD/rFAA/7BV
        AP+8ZwD/u2YA/7pnDP/Adi//x49g/9DIy//osJv/4KSK/9GYfP+5bkv/gTEI/11IL4eXm4EKAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAALqNSDbDehPxwnAA/8BsAP++agD/0IQA/9iQAP/WjAD/ynsA/7Rb
        AP+1XAD/w3EA/8V0AP/AbQD/xHcc/8mGPv/AeTT/v35F/7FrNf+jURn/oVsz/5VVNP98KwD/XjEK93FL
        JLN0ZUksAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvI1EOsiAFPPGdgL/wnAA/8l6AP/clwT/3ZoO/9OJ
        BP+7ZgD/vGYA/8t8Af/MgAT/x3sJ/8N2Cv+9bwj/vGkE/6l0PP+id1D/l2hA/5xlOv+aclX/kFs9/3op
        AP9aJgD/dzwH/2xWN3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC+kEQ6zIcb88p8B//HdwD/2pIA/+Sl
        Gf/epTf/w3QL/8JyBf/Ciyz/u4w5/7SAKP+uhkn/rYdP/7J0HP/DcgP/pnpD/51qMP+nXhL/nVwl/5hI
        E/+XOwn/eykA/1smAP97PQf/bFU3gf//9QIAAAAAAAAAAAAAAAAAAAAAAAAAAL+RRTrQjiLzzIcb/9GM
        Cv/ang3/z5kj/6yDRP+9fRP/2JQJ/66JQ/+rh0X/rIM6/62EPv+teib/wXgG/8h3AP+6bwr/tGEC/61R
        AP+lRAD/oT0A/6A6AP+DLwD/Th8A/4pAAP96RxbpdW1WLgAAAAAAAAAAAAAAAAAAAAAAAAAAwJRGOtOV
        KfO7lE7/uJdI/7ORSP+rjVf/o4RL/8uSEv/cmQb/xo4Y/8yNDf/Ligr/0IkD/9GFAP/MfAD/wGsA/7Ra
        AP+sTgL/q1AL/6VFAf+sVx//smMz/4YzAP9nKgD/ZTAC/3tRJL+Ff2kUAAAAAAAAAAAAAAAAAAAAAAAA
        AADBlkc62Z4w88ahTf+7jS7/xIkV/8+ZF//YnAn/4J4B/+GdAP/gmgD/3ZYA/9eNAP/OgAD/x3oP/8By
        G//Gg0X/06R8/8mPYf/YtZr/zqGA/9vBsf/Hk3H/hjQA/3w1AP9uNAT/bFIzkwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMadRzrhrDbz5bI9/+WtL//oqQz/56UA/+WiAP/gnAD/2pMA/9KIAP/KfAP/3a9v/9KY
        Vv/PlFP/4byZ/86VW//btI//6tfG/9q3mf/kz8D/4s2+/756Sf+HNwD/ij0A/3k5Av9rSyi3n6ucCAAA
        AAAAAAAAAAAAAAAAAAAAAAAAx59HOuGtPPPpt0j/57RA/+OqMv/alxL/0ogB/81/AP/JeQD/xXQA/8h9
        Fv/w3sf/7NW6/9GWUv/pzrL/yIQ9/+jOtP/PmGT/vnQw/+rXyP/o1sn/tmQk/4k7AP+SQwD/fUMO+W9i
        TFYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADGnUk64K1D8+a1Uv/jr0r/4KlD/9yhOf/WlCT/0IcP/8x+
        BP/JeAD/0pU+/8e+pv/nzar/3LB6/+zTt//brnz/8N3L/9qtgv+6ahv/1KR3/9mxjv+xVwr/jD8A/5BF
        AP+BSRP1bWNPRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMefSTrisknz6bxc/+a2VP/ksU3/4atF/96l
        P//anjX/1pUo/86KHP+Wm33/g5F8/9miVP/gtX//2qhq/8Z9Jf/NjkT/yog//7ljB/+2XQP/tFoD/7FU
        AP+IQgT/bEgjy3tjQ2SNhnAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyKFKOuW4UPPsw2f/6b1e/+e4
        V//lsk//4q1I/9+nQf/coTn/z5s8/6+WU//CjjL/z4cc/8yCGP/Gdgv/wG8F/7pmAP+zYAD/qVoB/5hR
        BP+XUgj/kVQU+XRQKsNxa1syAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADKpEs66L1W8/DK
        cv/txGn/679i/+i6W//mtFL/465K/9+oQf/coTn/2Zku/9KRKv/JiSb/woIj/7t7IP+1dBr/qmwW/55j
        Ff+LXBz/i2Io/7F+Lv+ujFO1jpygEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMqk
        TDrpv1jz8c1z/+7GaP/rv17/57ZS/+KuSv/fqEX/2aFB/9SbPf/Qljf/zpQ2/86TNP/Oki//zI0q/8SH
        Kf++gyn/uYEs/76HMf/Jkjj/z5g9/baedWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAwqReItq0Wb3evnDF1apZ1dOUMP/SkSz/0pEt/9SUMP/WmDT/2p46/9yjPf/dozz/2Z43/9KX
        N//OlTj/z5Uz/8yTNv/QmDr/0Zk7/9mgPf/MoFPZrqeaHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAsbCuDp/B/Ai6jk5YzIkk+9eZNf/fqEf/5LJT/+e3V//mtFH/4a1I/9qj
        Q//WnkD/2aE+/9qgOf/UnT//2qRE/9mhPf/apEb/3qdD/8eob5MAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALucYCbfs1Ll8Mt0//DKcP/swmL/5bNQ/92l
        Q//Znj3/3KNA/+KsR//gqUP/2qVH/+CsTP/gqkX/26ZI/+OvTP/crVTzwa+MRAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoZ2WCtu0VLvtx2j/5LZX/9qf
        O//UlTL/2Z47/+OxUf/oulf/469K/92nSP/jslL/5rVR/96oSP/isE//57dU/9axaMOtsroOAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyqpgTNK2
        dIHEl1Gb0pIu/+OyU//sxWn/7MNi/+KuSv/bpET/5rdY/+u/X//irUr/36pL/+q+X//muVr/zbN8dAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAALSaax7cslLR8s91/+3Iav/dqkn92p8+/+m9YP/vyW7/6LhU/9ujQ//pvV//7sZp/+C5
        ZOe+spksAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAM6sWmLjulfz2Lx3rcObV4fitFHz8tB4/+3GZ//YoD//5LNT//DM
        dP/uyGv/17hyqYim7QQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuKV6CsSrcTi6s6YSnqezBNCtWXbmvVf33LtuycSd
        W3zes1HX7sho/+nDaPvKtohaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArqSKBsio
        X0zDsIQsAAAAALykbSLTrVGJ1LFbobqzpRYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJiZoQKeoKYGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////wf///gA///4AH//+AB///AAf/8AAH/wAAA/4AAAH+AA
        AB/gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAB/gAAAf4AAAP+AAAH/gAAD/4AAB/+AAAf/8AAH//AAD//wA
        A//+AAf//4AH///AB////I/////P//////8=
</value>
  </data>
</root>