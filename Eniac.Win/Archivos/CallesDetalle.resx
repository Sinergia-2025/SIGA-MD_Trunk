<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAAAgAAAAIAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAIOjk2IklIQzpKSEQ8TUxKPDg2NSQAAAAKAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIEBAQMSEZELmhmZXZramjJXVpN62BeVOtoZ2LrbGtpx1xaWWYiISAgAAAACAAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAASEhEMWlhVOHx6dol/fXrXcnJw/XFycf94cmP/dm9d/3lzZP9wcG3/bGxs9WtqabNQT01QDw8OGAAA
        AAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAd3NvCJiVj4GZl5LjiIiE/25tav9nZmP/fHx4/313Zf95cFv/e3Rh/3Fzbv9bXVz/ZGVl/25u
        betlZGKLExISJAAAAA4AAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACfnJZIk5OP83p/f/9sdXT/a3hu/4iJhf+QjYb/eXJf/3VsVv93cFz/g4N//251
        b/9XYFn/WVpb/2pravFaWVheAAAAHAAAABIAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        Af//AAH//4AB//+AA///+B////////////8=
</value>
  </data>
</root>