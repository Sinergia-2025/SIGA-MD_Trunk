<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="tstBarra.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5OXnBrKysxKnpqcap6amHLGwsBbj4+MM////AgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhoN+HGtnX15zb2iVko+Jtba2tcO+vr/FkJCQu2Jh
        X5eMiog+/P3+BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKKdkzx0dW7FSUtH+UlbZv9djLP/bHZ+/2yo
        2f9IXnD/RFZl/3B+ianKwroMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhYaClVWOwP8VN1X/E0l0/yd6
        vP8rRFP/IJXc/wonOv8eZqH/MHmrr3QAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAMAAAAEAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdMECbJ33M/wwo
        QP8XZp3/ImiZ/yJUZ/8Rm9P/CyEu/x98wf8YXICtTwAAAgAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA4AAAAaJiQhMltXUV5kYFpsHx0bKgAAAA4AAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABk6
        V5skesf/Ch4s/yN8s/84Z4L/SoKS/0qwzf89S1X/K3y3/xZBVa1PAAACAAAAAAAAAAIAAAAGAAAADgQE
        Axo0Mi44ZWFbZIV/eJ+YkYnTo5uT9ZqTi/tkYFiBAAAAGAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAN1l3m0p5oP9ERkD/bnh2/6mooP/g3tT/9vXs/7i1sP9dZWr/VVtdrwAAAAoAAAAMCwoJHEJA
        PDxzb2lukIuEqaKblN2rpJz5rqef/66mnv+tpp7/n5mT/29rYpsAAAAKAAAABAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAClopmbiYN2/11YSv9+d2r/t7Ck/+3m2////PD/vru1/2RkY/9ubW27TktHRoJ+
        eHadmZOzrqii47awqvu5sqv/t7Cp/7Stpf+yqqL/sKmi/7Grpv+gm5X/c25llwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAALSuoJuJgnP/X1pM/354av+po5X/0Mq+/9XPxP+npJz/e3l0/4WD
        f/G5tbDpxcC6/cbBu//Dvrj/wLq0/7y2r/+5s6z/tq+o/7Wup/+1sKv/r6qm/5KMhf9xa2OVAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkYx/l4SAdP+EgHj/kIh5/5WLev+gmIr/ioaB/5WV
        lP+op6T/trSw/9DMyP/OysT/ysW//8bAu//Cvbf/v7my/7y1rv+6tK3/u7ey/7Ovq/+emJH/mJGJ/3Rv
        ZpUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACEgXowcG9twZKSkv+gnZf/trGp/8C8
        t/+PjYz/lpaW/7Kwrv/Y1dH/1NDM/8/Lxv/MxsH/yMK8/8W/uf/Bu7X/wLq0/8G9uv+5tbL/oZyV/6uk
        m/+knJT/dG9mlQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABfX16PlJST/8vL
        y//s7Ov/6ejn/5qamf+SkpL/tLOw/9fU0P/Szsn/zsrE/8vGwP/Iwrz/xL64/8O+uP/Hw8D/vru4/6eh
        m/+wqaH/t6+n/6Wdlf90b2aVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF9f
        XJWWlpP/zczL/+vq6f/h4N7/n56d/6Kiov+4trT/2NXS/9TQzP/Rzcf/zsnD/8vEvv/JxL7/zcrI/8XC
        wP+sp6H/ta6m/7qzq/+4saj/p5+X/3VwZ5UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAX15alZubk/+1tbT/5eXk/8rJx/+vr6z/u7u7/8C+vP/Z1tP/19TQ/9TQy//QzMb/z8vF/9TS
        z//Lysj/sq6o/7q0rP+/uLD/vLSs/7qyqv+poZn/d3FolQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAB+fHiTioqD/5WVjP+bm5X/pqaf/8jIxf/CwcH/s7Ct/7m2sv/EwLz/z8vG/9XS
        zf/c2tj/09LR/7q1sP/AurP/w722/8C5sv++tq7/vLSs/6ukm/95dGuVAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAALOxrJOko6L/dnZz/3d3dP+Tk5H/vr6+/8vLyv/NzMr/vby5/6yq
        pv+lop7/tLOw/8fGxf++u7b/yMK7/8rDvP/Gv7f/w7y0/8C5sP++tq7/raad/3t1bJUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsq+qk9rZ1//S0dD/xMPC/8zKyf/Pzsz/19bV/+Li
        4P/d3Nr/19bV/8rKyP+3trT/nJuX/5iVkP+vqqT/xL23/8rCu//Fvrb/wrqy/8C4sP+vqJ//fXdulQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACysKyT397d/+Pi4f/i4eD/3dza/9DP
        zf/n5uX/4N3a/9jU0P/X1ND/1tPQ/9TT0f/Ozcz/vr27/6Sin/+Wk47/p6Gb/8C4sf/Fvrb/wrqy/7Gq
        of9/enGVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALe1spPh4eD/4uHg/+Df
        3v/V09L/5eXk/+zr6v/g3dj/29fS/9jTzv/Uz8n/0czG/8/Lxv/Oy8j/zMrI/8HAvv+op6T/mZWR/6ym
        n//BurH/tK2k/4J7cpUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuLazk+Hh
        4P/i4eH/3Nva/9/f3v/y8vL/6ufk/+Xh3f/h3dn/3dnU/9nUz//V0Mv/0czF/87Iwf/Lxb//ycTA/8fF
        wf++vbv/qqmm/6mloP+wqaH/hH51lQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAC4trOT4eHg/+Hg4P/f3t3/8vLy/+/u7P/q5uP/5+Tg/+Xh3f/i3tr/3trV/9rW0f/W0cz/0s7H/8/J
        wv/Lxb7/x8G6/8S/uv/Cv7z/u7q4/62qpv+FgHeVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAALi2s5Ph4eD/4uLh//Hw8P/08/P/7evp/+vo5f/p5uP/5+Tg/+Xh3f/i39r/39vW/9zX
        0v/X083/1M7I/9DKw//Mxr//yMK7/8S+t//Cvbf/tLGs/4eCepcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAuLayk+Li4f/w8PD/+Pf3//Lw7v/v7er/7evo/+vo5f/p5uL/5+Pf/+Xh
        3f/i3tr/4NzX/93Y0//Z1M7/1dDK/9LNxf/OyMH/ysO8/8S9tf+uqKD/hX92jQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC4trOT7Ozs//r6+v/29fT/8/Hv//Hv7f/v7er/7ern/+vo
        5P/o5eL/5+Pf/+Xi3f/j39v/4NzX/9rV0P/RzMX/xL+4/7axqf2po5rtnJaN04uFfKd5c2owAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMPBvpP4+Pj/+vn5//f29P/18/L/8/Hw//Lw
        7f/w7ev/7ern/+fk4P/f29b/08/K/8bBu/23sqrtqKKa0ZuVjK2OiH+BgXtyVHVwZzBmYVcUREA2BAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAy8nGk/z7+//8/Pv/+fj3//Ty
        8P/r6eb/4NzY/9HNyPvCvbfts62m06Oela2Vj4aBiIJ5VnlzaS5jXlQUOTUsBAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC8urZw4uDe+dvX
        0/3KxsDtu7av0a2nn62dl46Bjod+VHx2bTBlX1UUMi0lBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH56
        cgqTjoZKkImAVH54bi5jXFISKCQbBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////4H///4A///8AP///AD///wA/wf8APgH/ADAB/wAAAf8AAAH/gA
        AB/4AAAf+AAAH/gAAB/4AAAf+AAAH/gAAB/4AAAf+AAAH/gAAB/4AAAf+AAAH/gAAB/4AAA/+AAD//gA
        f//8D/////////////////////////////8=
</value>
  </data>
</root>