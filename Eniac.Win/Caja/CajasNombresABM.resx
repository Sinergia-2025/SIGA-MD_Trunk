<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADAAAABYAAAAeAAAAGAAAAA4AAAAEAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAgAAAAOAAAAGBAQDi44NS5UWVRJi3BqW7NKRjpyBAQDMAAA
        ABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAABAAAAAcGBcUNEI+N2BfWU2XdGxdzX92ZvGAdmT/lYt3/5CI
        cfVoYlKpIR8aSgAAACIAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAKAAAAEgICAiAhHxs8S0c+bG5oXaV9dmfXfHJh93NpWP90a1r/lIx8/4yE
        df+PhnL/k4t0/5OKdP9+dmPXR0I3dAQEAzAAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAADCsoJDxNSD94amNVs4N8bd+Oh3f5gHlq/1lSRf87Ni3/MzAp/2Ba
        T/+Xjn3/iH9u/4yDcf+Lgm3/joVv/5GIc/+Kgm31ZmBQqyEfGkoAAAAgAAAADgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8OTIec2xdy4+GdP+Gfm//WVRK/0A9Nf89OjP/T0tC/2xn
        XP+TjX//oZqK/56Whv+SiXn/ioFw/4N6Zv+GfWn/iYBs/42Eb/+OhXD/enNg2UZCN3YFBQQwAAAAFgAA
        AAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFdSSSSel4jnvbem/5OOgf9rZ13/cWtf/2xl
        WP9bVUr/W1ZM/6Kcjf+zrZ3/rKWV/6Ocjf+dloj/gXhm/311Yv+CeWb/hX1p/4mAbP+NhG//hX1p9WNd
        TqsjIBtKAAAAHgAAAAwAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWFRKJKmjleXEv7H/v7mr/6CZ
        i/9kXlP/bmpf/5CLgP+nopb/uLOm/7u3q//BvbL/x8O5/8fDuf+0r6T/j4h4/3xzYf9+dWL/gXhl/4V8
        aP+JgGz/ioFs/3dvXtlHQzhwBAQEJgAAABIAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAABYU0kkrqqd5c3J
        u//GwbL/vLan/7OtoP+9uaz/xcG1/8bCt//Gwrf/vrqu/7Csn/+bl4r/gn1y/21oX/93dGz/j4l+/4J6
        af96cV//fXRi/4F4Zf+Ee2j/iH9r/352ZO8+OjFaAAAAHgAAABQAAAAEAAAAAAAAAAAAAAAAAAAAAFhU
        SiStqZ3lx8K2/8TAs//Ixbj/zcm9/8vHuv+/u67/qaWZ/4yHfP9rZ13/UExD/0A8NP85NS3/NjEo/zEs
        JP9FQTr/cGxk/4N9cP97cmH/eXBe/310Yv+AeGX/gHhl/U5JPWYAAAAaAAAAFAAAAAYAAAAAAAAAAAAA
        AAAAAAAAR0M6DpyYjqfEwbX3zcq8/8C8rv+loZT/gn1y/2FcU/9MRz//TEg//15ZT/93cmf/iYR5/5OP
        hf+YlYz/gHxy/1pVSv9DPjX/SEU+/2xoX/96c2T/d29e/3lwXv94cF79U01BXAAAAAgAAAAGAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAS0hADn57cEp6dmu/aGNY/1VQR/9fWlD/fHds/5+ajv+7t6r/zcm8/9DN
        wf/Ixbr/saWc/6WFfP/Qx7z/u7mu/4yIfP9iXFH/PTgv/0ZDPf9oY1j/dm1e/3JpWf1XUURSAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmRfVKOJg3f/p6KV/726rP/GwrX/uLSq/8K/
        s//U0MX/y8jA/8fDvP/Dtq7/p3Bm/5xpX//Mw7f/1dLG/62om/91cGT/RkA2/y0qJP9GQzz/Zl9T8VRN
        QUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgHtxbraypfefnJL/e3lx/7Kt
        oP/Iw7r/0c3H/8bDu//U0cn/2tjT/9fW0f/MwLr/pnZu/6GBeP/Oyr7/2tfK/62pnP9ybWH/TUc8/ysn
        IP8jIR3nNzMtLgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3MisGjoqAdJyZ
        j/GHg3j/oZ2S/726sP/X1Mz/0tDH/8/Mv//d2tD/29jT/9nX0f/Vzsf/z8nA/7m2r//Hxb3/1dHF/6Gd
        kP9kXlL/TUY7/zQwKP82MyxkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAcGBEEioZ6WqiilN+4s6X/w7+y/8rGuf/MyLr/vbmr/6Ghkf+GiXj/bXRg/1tpT/9UVEr/cGxk/4F8
        c/+Ae3D/f3pv/2VfVP8/OjH/Qjwx/05IPZsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAgn50NKailrm8uKz9u7aq/5WQhf9lYlb/TF1A/0xaQP9SVUX/QUY0/zMx
        KP82MSr/NjEp/zYzKf86Oi//Ozgv/yonIf8lIhz/Pzoyz2JdUxIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcW1jFJ6ajp2Qin79cGtf/4iDe//Bv7z/rKmk/313
        a/9fWU//HRoW/yIfGf8XHBH/DDUJ/wVDBP8LLQj/GRgT/xMSD/8qJyPTZmFXFgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAc29kEnt2aqdtaFz/gn10/+/v
        7v/u7ez/i4Z9/3l0aP9IRDz/EhIO/wopCP8MQQn/FDwQ/x0yF/8nJh/zGxkW8zUzLoMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfnluGHt2
        aqtxbGD/q6eg/+jn5f+5trD/gHpu/3hzZ/9FQTr5MzIr91pXTf9eV0/9VE1F+WFbUr1aVUyhZ2NaJAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAhoF1Fn54bJN7dWrbioV6zYiDeK2DfXKLhX90aoF8cUR+eW6fa2de/11ZUf9YXEz/Slc//1VS
        Ru9ybWM0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAlZCEBouGehqEf3IQjId6BAAAAAAAAAAAAAAAAHt2bIVOS0b/NDIv/zE7
        LP8uRin/TU1C8XdxaDQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbWlgQGBc
        VJddWVGjWlVOpVhTTZ9bV0+DeXVrFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD///8CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////////n////Af//+AD//8AAP/8AAB//AA
        AH/wAAA/8AAAH/AAAB/wAAAf/AAAH/wAAB/+AAAf/wAAH/+AAA//wAAP/+AAD//wAA//+AAf//wYH///
        +B////wf//////////////////////////8=
</value>
  </data>
</root>