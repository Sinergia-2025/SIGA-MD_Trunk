<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD19PwE9PP7Bv///wb+/v4E/v7/Av///wIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC3sq8Ewb27HKShkFZyaVOhX0o0pXVkU3TBv70s0dDQHuLi
        4xDq6uoI9vb2AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAAoAAAAMAAAAEAAA
        ABIAAAAUAAAAFgAAABYAAAAWAAAAEgAAAA4AAAAIAAAAAKaiklRvZFLJdmhN42dfRv9XQin/bWJO72VR
        Pc92ZFOV0dHRKuDg4B7o6OgQ9fX1AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAOBgYHFAUF
        BhgAAAAaAAAAIAAAACQAAAAmAAAAKAAAACoAAAAsAAAAKgAAACYAAAAKraqacIyHc/9+dFf/f3pd/4F8
        ZP9ta1n/UTcd/2RPOLPr7vEa6+zsFunp6RD09PQCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAe29eDKmX
        d1KkkW6ZoY5sm5eHa1wxLCUgCwoKHDYxKyokIB0oAQEBJAAAACgAAAAmGhoZJm9oYFR8cmKPsq+b+6Kg
        hv+lpYf/qrOc/2JbSf9aRCz/X005s21bSFqGeGsYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAObS
        tgSynnd6lIFW84JvRv+BbEb/kHxW9ayZdJGpl3CNoZBkxaSTZ7mThGRoExEPKgAAACpJSEVGu7m05a+r
        n/+ioZP/l5V+/6Chhf+6xbP/prWq/6S1rv9kWUn/YUoy+WNSQVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADBrI0QtaJ8XJmIW+2Hdkr/hXNL/4RyS/+Eckr/kX9V/ZKCVP+Nf0z/kYRN/52PW/GFeFpwAAAAKgkI
        CDCurauhysrG/5ybkv+lpIz/eX1s/6W0qv/M5OH/ho+H/1hELP9fSjS/UUY7HAAAAAAAAAAAAAAAAAAA
        AADBqZUCrZtxTqKSYsWXiFX1koNU/5qMZP+ZimT/mIpk/5mKZP+YimL/nI9l/5+TZv+il2f/oJVg/6OU
        Y9udjWSnlIZih6Wej4mtq6X7p6ae/6KhkP+Qlo3/eISB/7PCvv9mYVL/XEgs/2xcRpehnZgMAAAAAAAA
        AAAAAAAAAAAAAKyacVCsn3DrrqR3/6+lfP+uo33/rqOA/62hf/+soH7/raB//66igP+xpoL/taqF/7mw
        if+5sIb/tat8/7etgP+5r43/zcOq+Z6Ziv+Mjob/cnZu/36Dff9kZWL/k5OK/3l0Zv9iWEX/alo/93tt
        VaujnZYMAAAAAAAAAACjjWoSsKF3wbmth/+0poL/rp96/6ubeP+qmnf/q5t5/62efP+woYH/tKaG/7ms
        jP+/s5P/xbub/8vBov/Px6j/08yt/9DJsP/SyrT/oJuP/3p8d/87QTn/YGVf/3R1c/+ho5v/dHJk/2Ja
        Rv90alLjhnxng6mknQgAAAAAAAAAAKCMZTK/so/pvrGT/7Cffv+unXv/r559/7Ghgf+1pYb/uKqM/72v
        k//CtZr/yL2i/87Eq//UzLP/2dK6/97Ywf/j3cn/5uHO/+Dczv+0s6//mpqZ/1lZV/93d3b/o6mo/8TU
        0f9hZlf/VFE1/3JvW40AAAAAAAAAAAAAAAAAAAAAlH5XJMW6m93u693/6ubY/+bg0P/i28v/39jH/97W
        xf/e1sX/39fG/+Hayv/k3s7/6OLT/+vm2P/u6dz/8Ozg//Lv4//w7eL/5uXf/9HQzP+dnZj/3t7Y/8rK
        xP/Z4dv/zOTf/5Snof9nblz/gYd316asoyoAAAAAAAAAAAAAAABUNQwErp56k+Xfzf/7+vX/+vn0//r5
        9P/7+vT/+/n0//v59P/6+fT/+/n0//v59P/7+fT/+/n0//v59P/7+fP//Pry//b07f/R0Mr/v8G5/7Ky
        pv+zsqn/29vQ/8jRwv+ktq3/ssjE/5imoPWotKvnsLmySAAAAAAAAAAAAAAAAAAAAACLdk8ctaaFr+La
        x/v49e3//fz4//38+P/+/vz////+//7+/f/+/v3///79///+/f///v3//////+Tezv/Dtpj/tKaI/5OD
        Yv+qoor/ysm6/7a0oP+zs5z/s7mm/4WOhf+Yopv/q7Gso83T0ybU3N8GAAAAAAAAAAAAAAAAAAAAAAAA
        AAB7ZT4QnoxoZLeoibHFuJ3Rxbic0dPKuef59/P//////////////////////////v/p5Nf/oJBu/4Nw
        S/+Cbkr/g3BI/62jif+bmpL/lpSG/5COfv+Rkob/i4+E/3t6dP+Pin3lj31YdIJrRxIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAARSwKBmNJHhB/aEI0kH1VvbCjgf/Xzrr/6+XZ/+/r4P/l3s//yL6m/6KT
        cP+Wh2P/l4dl/5aHZf+XiGX/ppt9/5mSff+ooo//iIV5/3VvZP+OiXb/j4dm/5qRaf+dkV/9koFXsYx2
        VBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkn5aKJiIXMeglF//npJZ/5iLVP+fkWL/rqF9/6ue
        e/+qnnz/rqOC/62ig/+soIL/rKCC/62hgv+vpIT/ua+P/8G5nf+6tJ7/qqOG/6WccP+lmmL/pZpi/6Wb
        ZP+fk17/loRanY93WgYAAAAAAAAAAAAAAAAAAAAAAAAAAJN6YASbiWChp5po/6ibaP+jlmL/oZNe/6eZ
        av+5rYv/t6qJ/7Omhf+ypIX/sqSG/7OliP+0p4r/tqqN/8G2nP/Mw63/0Mix/9XOt//Ryqz/v7aN/7+2
        jv/AuI//wLeP/7asff+hkmLvmINfOgAAAAAAAAAAAAAAAAAAAAAAAAAAmoVhIqubceGypHv/ppRs/6OQ
        Z/+ij2b/p5Ru/7Skhv+3qIv/taaI/7Slh/+3qIv/uauQ/7yvlP/AtJr/zsSw/9fPvf/c1cT/4NvL/+Ld
        zf/VzrP/1c6y/9jStf/Y0rb/1c+x/7WpfP+fjGVqAAAAAAAAAAAAAAAAAAAAAAAAAACdiGMouauF5+Db
        xP/f2sX/29W//9jQuv/Wzrf/39jJ/+Lc0P/e2Mn/2NC+/9jQv//Z0cD/29PD/93Wxv/m4dX/7uri//Dt
        5v/z8Or/8/Hq/+rm1v/p5dT/6ubW/+rm1v/q5tX/xryX/6WSamwAAAAAAAAAAAAAAAAAAAAAAAAAAJqE
        YAy1pH+7493I//f17//39e7/9/Xu//f17v/6+fX///////39+//5+PP/+ffz//j38v/49/L/+Pfy//r5
        9v/+/v3//v79//7+/f/8/Pn/+Pbw//j28P/39u//+Pbx//Px5v/FuJbzppJsQgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAK2ZdEjHuZfn7ejY//38+f////////////7+/P/59/D/+/r1/////v////7///7+///+
        /v///v7///7+///////////////////////////////////////9/Pn/4trD/7mngq2himgKAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAALOfekjFtJHD2c6x9+feyf/p4c3/6eHJ/+/o0//y7dz/+vfv//79
        +v////7///////////////7//f36//j16v/18eP/+ffu//r48P/69+//9fDi/+LYvf/Ds4/Dr5t3KAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK2YdBK3o35IvquGcL6rhn7QwJ7d9e/e//r3
        7v/59u3/+/jw//z69f/8+vP/+vfu//n26//38+X/9fDg//Xv3//1793/7ePH/+HUs/3TxKHhwrCMjbOe
        eh4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMWz
        j3Tj2Lz7+vft//79+////vz/+/nz/+3kz//38uT/+/nz//v58v/7+fL/+/nz//v47//j17r7w7CMg7ai
        fiKjjGgCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAu6eDDsy6londz6/r6d7F/+nfyP/dz7PhzbuYueXZvfn59er//v36//7+/P/9/Pf/7+fU/9LC
        oLe8qIMSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAvaaCBMeyjjLMuZRezLiTWsWwiyjAq4cO0L2aft7Pr+Xp3cL/6+DH/+PW
        ufPVw6Grx7KPJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/qIUCzLeUKtK+
        mlzTv5tkzrmVPMWwjAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////P////Af///wH/5/4B/8A8AP+AHAD+AAAA/AAAAHgAAAB4AA
        AA+AAAAPgAAAD8AAAB/wAAAf/gAAB/wAAAP4AAAD+AAAA/gAAAP4AAAD/AAAA/4AAAf/4AAP//AAP//w
        AH///+D///////////////////////////8=
</value>
  </data>
</root>