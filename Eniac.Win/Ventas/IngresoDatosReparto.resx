<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="tstBarra.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAnp6gHrS0slC1tbIUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACampkWysrEv8zMxbW2trAyAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC+vbZE19fP583NxtW4t7ZGwMLGAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAAoAAAAIAAAAAgAAAADDw7pU1tXS6cnH
        x+O5trheuru9BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAMAAAAEgAAABoCAgEkFBIKUCIhGoMpJyBsGhgPHAAA
        AAa+vL5W1NLT6cnGx++5t7h0uLi5DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAGAAAADAgGARQJCAIiAAAAJAcGBC4vKx5GNjEdVB4aEFwfHRndOzo5/1pZ
        V/svLSeHAAAAIgAAABSrqape09HR6cnGxve6t7iLt7a3EgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAABAbGRFAMS8op0dGP8eBfnKnp6GNt5uTdd96bkPrWVAz0TYy
        MPteXVz/g4B//0FAPM0IBwJAAAAAMAAAACaVk5Nm0M7O58nGxvu3tLSdjIqKGgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGdbLwR2a0Uqh39gYpCMfMOkopv/wL21/8K+sv+1sJ//pJ6L/4yF
        cP+EemP/VE5H/1RTU/97enr/MjEu4yMhGX4uLCVqDQwIQAAAADCAfX5szcrL5cjGxv+tqaqrYV9fIgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbWE1LoB1TduWjXD9pJ2K/52XiP+Ffm//lYtv/5SJ
        Yv+JiGv/XY+1/5+fmP+KhHn/LCsp/ycnJ/8PDw//SkpJ+3p5dvNvamG/R0M5cgYFAkBxb3Bqwb296by4
        tf+lpJqzS0tIJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsZUcofnZa5Yl9Xv9rYkv/Qjsu/0U/
        M/+bknj/nZR6/6Kjmf+LqLv/m5mP/62mmP+Nh33/WlZO/2BaUP95dWr/pqKd/62mo/+clpH1ZGJcwTAu
        J3Z6dnPFysbE/8nHu/+iopW5UVBMOAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAEyDoQxsd2rFhXxh/5KK
        eP+Qinz/rKaZ/9XQyP/l4dz/7+3q/8rCtv+xlm7/tKaP/7Com/+upZb/saaT/2xgO/9mWTH/kodv/6mg
        l/9ramr/VlVV90ZEQ/eLior/4N7c/8jGuv+sqaLTYV1eTgAAAAYAAAAAAAAAAAAAAAAAAAAAbG5XDJqS
        gMWwppX/vbSm/7Suof+0rqD/ycCx/8a3o//Gspr/yL2u/8KNJv/OpFn/tK2i/7Comv+uo5H/hHpj/2xg
        Ov9lVyP/cGIv/3JoR/9taFz/VlRS/1JRUf+zsrL/4d/e/8/Lyf+xq6vXeXR1RAAAAAAAAAAAAAAAAAAA
        AACEel0KoJaBw6iagv+slWr/sY9F/7qPLf/AjRv/wogJ/8eMFf/Oup7/v4kp/8iNKf+gk4H/q6aa/66j
        kP+Phnj/joZ3/46GcP+FelX/fW45/4BwNf+BdEj/a2RR/2FfXP91dHX/y8fH/8fAvv+9t7fRs6+uKAAA
        AAAAAAAAAAAAAIqKdwSvqJiv1cKm/9WrZP/jt0r/778c//TCCf/1xAT/770N/9W/l/+5hjv/uXAA/7h8
        Mv+9p47/q6GP/42Edf+MhHX/lY19/52UhP+hl4T/nZFw/5SEUP+NfD7/g3RB/2phR/9/eW7jw7y6r87J
        yMOvqqgqAAAAAAAAAAAAAAAAAAAAAKujkonayrT/5cWM/+W9W//00lr/+NVI//fPL//ywxj/2MCJ/7eS
        Zf+rXQD/sGgX/8Gjg/+poI7/i4N0/4qDc/+Tinr/mpKB/6OZiP+roY//sKaT/6qfhP+dj2L/kYBF/49+
        Rt+ViWkmxsLFEAAAAAAAAAAAAAAAAAAAAAAAAAAApZ+PVMWukPvkxJL/5sBm/+/DNP/1yR7/88QT/++8
        Bv/bum3/va6d/6xxM/+9g0j/wqWI/6eejP+KgnP/iIBy/5CIef+ZkH//oJeG/6ifjP+wppP/s6mW/7Op
        l/+vpI3/qJx85ZiMayQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmp5wat6GE0dCncf/Xr2f/3bhj/+C+
        Zv/fwHT/4ceM/+PUuP/SzcP/w7en/7yihP+4pY7/ppyK/4qBc/+Gf3D/j4d3/5aOff+elYT/pp2L/66k
        kf+yqJX/sqiV/7Opl/+2q5fln5R5JAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC1qpZYxLObx8zA
        qu3Uy7j/3NbG/+Ldz//m4tb/6OXZ/+nm2//j4Nj/0s7G/7Osn/+to5L/i4N1/4V9b/+NhXb/lYx8/52U
        g/+km4n/rKKQ/7KolP+yqJX/s6mW/7WqluWflHgkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACgnoYOtK2SMsfApWbIwqzNx8Cu/8fAsf/HwLL/x8Cy/8jBtP/Kw7b/ysO2/8zFuP+NhXj/g3tt/4uD
        dP+Ti3v/m5KB/6OZiP+roY7/saeT/7Kolf+zqJX/taqW5Z+UeCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAMnCtI/a1Mr/39rR/+Tf1v/n49z/6+jh/+/s5v/z8e3/7Onl/5SO
        gv+BeWv/iYFy/5GJef+ZkID/oZiG/6ifjP+wppP/sqiV/7Oolf+1qpbln5R4JAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3drRfPb08v/5+Pb/+Pf2//j39f/08vD/8O7q/+jl
        4P/i3db/qaKV/4mBcv+KgXP/j4d3/5aNff+elYT/p52L/66kkf+yp5T/s6mV/7WqluWflHgkAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADTz8Qc4+DZetbQxLfBuq7jtq+j+7Cp
        nf+spJj/qKCU/6Wdkf+knZD/oZqO/6Kajv+imo3/opmK/6Saiv+mnYr/q6KO/7Gnk/+yqJX/taqW5Z+U
        eCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAc2RDCJKH
        bSSWjXtSnpeIjaOdkMWoo5jrraif/bKso/+1r6b/trGo/7iyqf+6taz/vbet/7+4rP++tqj/vLKh/7as
        mf+1qpbln5N4JAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAoJd8DKmhjy6rpZdgtK+knb+7ss/Ixb7x0s/J/9XRy//X1M3719TN89jV
        zenY08rZ0Mm9ybivm6WXjG8YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABxZkICrKaREr+6rDrV0cdq1tLIaNPP
        w1DOybw6ycS1KMG8qxi1sJwOj4pxBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////////8/////n////8////3n///4cf/8AHj/+AB8f+AA
        Dj/gAAIf4AAAD+AAAAfgAAAD4AAAA+AAAA/wAAAP8AAAD/gAAA//AAAP/wAAD/+AAA//wAAP//gAD///
        gA////////////////////////////////8=
</value>
  </data>
</root>